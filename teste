/*
 *    This program is free software; you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    Copyright (C) 2015 George Antony Papadakis (gpapadis@yahoo.gr)
 */

package SupervisedMetablocking;

import DataStructures.AbstractBlock;
import DataStructures.Comparison;
import DataStructures.EntityIndex;
import DataStructures.IdDuplicates;
import DataStructures.UnilateralBlock;
import Utilities.ComparisonIterator;
import Utilities.Constants;
import Utilities.Converter;
import Utilities.ExecuteBlockComparisons;
import Utilities.FileUtilities;
import Utilities.StatisticsUtilities;
import classificação.CriaMatrixWeka;
import data.Common;
import run.fs_dedup_real;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.List;
import java.util.Random;
import java.util.Set;



import weka.classifiers.Classifier;
import weka.core.Attribute;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;

/**
 *
 * @author gap2
 */

public abstract class AbstractSupervisedMetablocking implements Constants {

	protected final boolean dirtyER;

	protected int noOfAttributes;
	protected int noOfClassifiers;
	protected double noOfBlocks;
	protected double validComparisons;
	protected double[] comparisonsPerBlock;
	protected double[] nonRedundantCPE;
	protected double[] redundantCPE;

	protected Attribute classAttribute;
	protected ArrayList<Attribute> attributes;
	protected final EntityIndex entityIndex;
	protected Instances trainingInstances;
	protected final List<AbstractBlock> blocks;
	protected List<Double>[] overheadTimes;
	protected List<Double>[] resolutionTimes;
	protected List<Double> sampleMatches;
	protected List<Double> sampleNonMatches;
	protected List<Double>[] sampleComparisons;
	protected List<Double>[] sampleDuplicates;
	protected List<String> classLabels;
	protected final Set<IdDuplicates> duplicates;
	protected Set<Comparison> trainingSet;
	protected Set<IdDuplicates> detectedDuplicates;
	protected Connection con;
	protected int elements[]=new int[10];
	protected Hashtable balance = new Hashtable();

	public AbstractSupervisedMetablocking (int classifiers, List<AbstractBlock> bls, Set<IdDuplicates> duplicatePairs) {
		blocks = bls;
		dirtyER = blocks.get(0) instanceof UnilateralBlock;
		entityIndex = new EntityIndex(blocks);
		duplicates = duplicatePairs;
		noOfClassifiers = classifiers;

		getStatistics();
		prepareStatistics();
		getAttributes();
	}

	protected abstract void applyClassifier(Classifier classifier) throws Exception;
	protected abstract List<AbstractBlock> gatherComparisons();
	protected abstract void initializeDataStructures();
	protected abstract void processComparisons(int configurationId);
	protected abstract void savePairs(int i, ExecuteBlockComparisons ebc);
	protected abstract int getCount();

	public void applyProcessing(int iteration, Classifier[] classifiers, ExecuteBlockComparisons ebc) throws Exception {
		getTrainingSet(iteration,ebc);
		// System.out.println(trainingInstances.size() + "  ----- " +temp);
		for (int i = 0; i < classifiers.length; i++) {
			System.out.println("\n\nClassifier id\t:\t" + i);
			initializeDataStructures();

			long startingTime = System.currentTimeMillis();
			classifiers[i].buildClassifier(trainingInstances);
			applyClassifier(classifiers[i]);
			System.out.println("count ---> "+ getCount());
			List<AbstractBlock> newBlocks = gatherComparisons();
			double overheadTime = System.currentTimeMillis()-startingTime;
			System.out.println("CL"+i+" Overhead time\t:\t" + overheadTime);
			overheadTimes[i].add(overheadTime);

			//commented out for faster experiments
			//use when measuring resolution time
			long comparisonsTime = 0;//ebc.comparisonExecution(newBlocks);
			System.out.println("CL"+i+" Classification time\t:\t" + (comparisonsTime+overheadTime));
			resolutionTimes[i].add(new Double(comparisonsTime+overheadTime));

			processComparisons(i);
			// savePairs(i,ebc);
		}
	}



	protected boolean areMatching(Comparison comparison) {
		if (dirtyER) {
			final IdDuplicates duplicatePair1 = new IdDuplicates(comparison.getEntityId1(), comparison.getEntityId2());
			final IdDuplicates duplicatePair2 = new IdDuplicates(comparison.getEntityId2(), comparison.getEntityId1());
			return duplicates.contains(duplicatePair1) || duplicates.contains(duplicatePair2);
		}

		final IdDuplicates duplicatePair1 = new IdDuplicates(comparison.getEntityId1(), comparison.getEntityId2());
		return duplicates.contains(duplicatePair1);
	}

	private void getAttributes() {
		attributes = new ArrayList<Attribute>();
		attributes.add(new Attribute("ECBS"));
		attributes.add(new Attribute("RACCB"));
		attributes.add(new Attribute("JaccardSim"));
		attributes.add(new Attribute("NodeDegree1"));
		attributes.add(new Attribute("NodeDegree2"));

		classLabels = new ArrayList<String>();
		classLabels.add(NON_MATCH);
		classLabels.add(MATCH);

		classAttribute = new Attribute("class", classLabels);
		attributes.add(classAttribute);
		noOfAttributes = attributes.size();
	}

	private void getStatistics() {
		noOfBlocks = blocks.size();
		validComparisons = 0;
		int noOfEntities = entityIndex.getNoOfEntities();

		redundantCPE = new double[noOfEntities];
		nonRedundantCPE = new double[noOfEntities];
		comparisonsPerBlock = new double[(int)(blocks.size() + 1)];
		for (AbstractBlock block : blocks) {
			comparisonsPerBlock[block.getBlockIndex()] = block.getNoOfComparisons();

			ComparisonIterator iterator = block.getComparisonIterator();
			while (iterator.hasNext()) {
				Comparison comparison = iterator.next();

				int entityId2 = comparison.getEntityId2()+entityIndex.getDatasetLimit();
				redundantCPE[comparison.getEntityId1()]++;
				redundantCPE[entityId2]++;

				if (!entityIndex.isRepeated(block.getBlockIndex(), comparison)) {
					validComparisons++;
					nonRedundantCPE[comparison.getEntityId1()]++;
					nonRedundantCPE[entityId2]++;
				}
			}
		}
	}

	protected Instance getFeatures(int match, List<Integer> commonBlockIndices, Comparison comparison) {
		double[] instanceValues = new double[noOfAttributes];

		int entityId2 = comparison.getEntityId2() + entityIndex.getDatasetLimit();

		double ibf1 = Math.log(noOfBlocks/entityIndex.getNoOfEntityBlocks(comparison.getEntityId1(), 0));
		double ibf2 = Math.log(noOfBlocks/entityIndex.getNoOfEntityBlocks(comparison.getEntityId2(), 1));
		instanceValues[0] = commonBlockIndices.size()*ibf1*ibf2;

		double raccb = 0;
		for (Integer index : commonBlockIndices) {
			raccb += 1.0 / comparisonsPerBlock[index];
		}
		if (raccb < 1.0E-6) {
			raccb = 1.0E-6;
		}
		instanceValues[1] = raccb;

		instanceValues[2] = commonBlockIndices.size() / (redundantCPE[comparison.getEntityId1()] + redundantCPE[entityId2] - commonBlockIndices.size());
		instanceValues[3] = nonRedundantCPE[comparison.getEntityId1()];
		instanceValues[4] = nonRedundantCPE[entityId2];
		instanceValues[5] = match;

		Instance newInstance = new DenseInstance(1.0, instanceValues);
		newInstance.setDataset(trainingInstances);
		return newInstance;
	}



	int temp=0;
	protected void getTrainingSet(int iteration, ExecuteBlockComparisons ebc) throws FileNotFoundException {

		int trueMetadata=0;
		int matchingInstances = (int) (SAMPLE_SIZE*duplicates.size());
		double nonMatchRatio = matchingInstances / (validComparisons - duplicates.size());
		trainingSet = new HashSet<Comparison>(4*matchingInstances);
		trainingInstances = new Instances("trainingSet", attributes, 2*matchingInstances);
		trainingInstances.setClassIndex(noOfAttributes - 1);
		Random random = new Random(iteration);
		con=new myql_connection().create_conection("scholar_clear");
		PrintStream pstxt = null;
		PrintStream psarff = null;

		try {
			pstxt = new PrintStream(new FileOutputStream(new File("/tmp/levels_arff.txt"),false));
			psarff = new PrintStream(new FileOutputStream(new File("/tmp/levels_arff.arff"),false));
		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		}

		psarff.println("@relation whatever");
		for (int i = 0; i < trainingInstances.numAttributes()-1 ; i++) {
			psarff.println("@attribute "+i+" numeric");			
		}		
		psarff.println("@attribute classe {0,1}");
		psarff.println("@data");
		int teste=0;
		for (AbstractBlock block : blocks) {
			ComparisonIterator iterator = block.getComparisonIterator();
			
			while (iterator.hasNext()) {
				
				Comparison comparison = iterator.next();
				final List<Integer> commonBlockIndices = entityIndex.getCommonBlockIndices(block.getBlockIndex(), comparison);
				//comparison.
				if (commonBlockIndices == null) {
					continue;
				}
				teste++;
				//if (random.nextDouble() < SAMPLE_SIZE*16)
					getLevels(comparison,ebc,block.getBlockIndex(),pstxt,psarff);

				//                int match = NON_DUPLICATE; // false
				//                if (areMatching(comparison)) {
				//                  if (random.nextDouble() < SAMPLE_SIZE) {
				//                      trueMetadata++;
				//                      match = DUPLICATE; // true
				//                  } else {
				//                      continue;
				//                  }
				//              } else if (nonMatchRatio <= random.nextDouble()) {
				//                  continue;
				//              }
				//        	
				//    		    trainingSet.add(comparison);
				//    		    Instance newInstance = getFeatures(match, commonBlockIndices, comparison);
				//    		    trainingInstances.add(newInstance);
			}
		}
		pstxt.close();
		psarff.close();

		try {
			//
			callAllac();   
			loadFileTrainingSet(trainingInstances);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		System.out.println("teste  --->" + teste);
		System.out.println("trainingSet.size() - trueMetadata)" + (trainingSet.size() - trueMetadata)  + "   ----------->> " + trueMetadata);
		//sampleMatches.add((double) trueMetadata);///positivos
	//	sampleNonMatches.add((double) (trainingSet.size() - trueMetadata)); //negativos
	}


	
	


	//    protected void getTrainingSet(int iteration, ExecuteBlockComparisons ebc) {
	//        int trueMetadata = 0;
	//        Random random = new Random(iteration);
	//        int matchingInstances = (int) (SAMPLE_SIZE*duplicates.size()+1);
	//        double nonMatchRatio = matchingInstances / (validComparisons - duplicates.size());
	//
	//        trainingSet = new HashSet<Comparison>(4*matchingInstances);
	//        trainingInstances = new Instances("trainingSet", attributes, 2*matchingInstances);
	//        trainingInstances.setClassIndex(noOfAttributes - 1);
	//
	//        for (AbstractBlock block : blocks) {
	//            ComparisonIterator iterator = block.getComparisonIterator();
	//            while (iterator.hasNext()) {
	//                Comparison comparison = iterator.next();
	//                final List<Integer> commonBlockIndices = entityIndex.getCommonBlockIndices(block.getBlockIndex(), comparison);
	//                if (commonBlockIndices == null) {
	//                    continue;
	//                }
	//
	//                int match = NON_DUPLICATE; // false
	//                if (areMatching(comparison)) {
	//                    if (random.nextDouble() < SAMPLE_SIZE) {
	//                        trueMetadata++;
	//                        match = DUPLICATE; // true
	//                    } else {
	//                        continue;
	//                    }
	//                } else if (nonMatchRatio <= random.nextDouble()) {
	//                    continue;
	//                }
	//
	//                trainingSet.add(comparison);
	//                Instance newInstance = getFeatures(match, commonBlockIndices, comparison);
	//                trainingInstances.add(newInstance);
	//            }
	//        }
	//
	//        sampleMatches.add((double) trueMetadata);
	//        sampleNonMatches.add((double) (trainingSet.size() - trueMetadata));
	//    }



	private void callAllac() throws IOException {
		Common common=new Common();
		common.setSortFile("/");
		common.setElementos("3,4,5,6");
		String line;
		String cmd;
		String userHome = System.getProperty("user.home");
		String file ="/tmp/levels_arff" + " /tmp/levels";
		//String file ="/tmp/treinamento_activeXXX" + " /tmp/teste";
		
		
		int att=5;
		Process proc = null;		

		//new CriaMatrixWeka(common).criaArffActiveLearning("/tmp/levels.txt",4);
		cmd = "cd  "+ userHome+ "/Downloads/SSARP/Dedup/test5/; bash ./gera_beans.sh  " +file + "   "+ att + " "+ att;
		proc = Runtime.getRuntime().exec(new String[] {"/bin/sh", "-c", cmd});

		BufferedReader read = new BufferedReader(new InputStreamReader(proc.getInputStream()));
		try {
			proc.waitFor();
		} catch (InterruptedException e) {
			System.out.println(e.getMessage());
		}
		BufferedReader buf = new BufferedReader(new InputStreamReader(proc.getInputStream()));
		while ((line=buf.readLine())!=null) {
			System.out.println(line);
		}
		while (read.ready()) {
			System.out.println(read.readLine());
		}
		cmd = "cd  "+ userHome+ "/Downloads/SSARP/Dedup/test5/; bash ./SSARP2.sh  " +file + " "+ common.getRounds() + " 0 " + "  0  "  + " " +att;
		proc = Runtime.getRuntime().exec(new String[] {"/bin/sh", "-c", cmd});
		System.out.println("CMD 1= " +cmd);

		read = new BufferedReader(new InputStreamReader(proc.getInputStream()));
		try {
			proc.waitFor();
		} catch (InterruptedException e) {
			System.out.println(e.getMessage());
		}
		buf = new BufferedReader(new InputStreamReader(proc.getInputStream()));
		while ((line=buf.readLine())!=null) {
			System.out.println(line);
		}
		while (read.ready()) {
			System.out.println(read.readLine());
		}
		System.out.println("finaliza processo");
	}

	private int original(Random random, Comparison comparison, int trueMetadata, List<Integer> commonBlockIndices, int trueMetadata1, double nonMatchRatio){
		temp++;
		int match = NON_DUPLICATE; // false
		if (areMatching(comparison)) {
			if (random.nextDouble() < SAMPLE_SIZE) {
				trueMetadata1++;
				match = DUPLICATE; // true
			} else {
				return trueMetadata1;
			}
		} else if (nonMatchRatio <= random.nextDouble()) {
			return trueMetadata1;
		}

		trainingSet.add(comparison);
		Instance newInstance = getFeatures(match, commonBlockIndices, comparison);
		trainingInstances.add(newInstance);
		return trueMetadata1;
	}
	
	private void loadFileTrainingSet(Instances trainingInstances2) throws IOException, SQLException {

		BufferedReader br = new BufferedReader(new FileReader("/tmp/final_treina.txt"));

		StringBuilder sb = new StringBuilder();
		String line = null, splitLine[];
		Statement st = con.createStatement();
		String idA,idB = null, block = "";
		int countP=0,countN=0;

		while ((line=br.readLine()) != null) {
			//System.out.println(line);
			splitLine=line.split(",");
			idA=splitLine[0].split(":")[2];
			idB=splitLine[2].split(":")[2];
			block=splitLine[4].trim();
			String label=splitLine[3].trim();

			//System.err.println("select * from base_scholar_clear where recA like '" + splitLine[0]+ "' and recB like  '" +splitLine[2]+"';");
			//    		ResultSet rs = st.executeQuery("select * from base_scholar_clear where recA like '%" + idA+ "%' and idB ="+idB);
			//			while( rs.next()){
			//				block=rs.getString("idA");
			//				label=rs.getString("label");
			//				if(label.equals("true"))
			//					countP++;
			//				else
			//					countN++;
			//			}
			//	rs.close();
			System.err.println(idA +" " +idB + " " + block);	
			Comparison comparison= new Comparison(true, Integer.parseInt(idA), Integer.parseInt(idB));
			trainingSet.add(comparison);
			final List<Integer> commonBlockIndices = entityIndex.getCommonBlockIndices(Integer.parseInt(block), comparison);
			if(label.contains("true"))
				countP++;
			else
				countN++;			
			if(commonBlockIndices!=null){	
				Instance newInstance = getFeatures(label.equals("true")?1:0, commonBlockIndices, comparison);
				trainingInstances.add(newInstance);
			}
		}
		System.out.println("valores  --> Positio -> " +countP  +"  negativos -> "+countN);
		sampleMatches.add((double) countP);///positivos
		sampleNonMatches.add((double) (countN)); //negativos
	}

	private void getLevels(Comparison comparison, ExecuteBlockComparisons ebc, int i, PrintStream pstxt, PrintStream psarff) throws FileNotFoundException {
		String concatStringA;
		String concatStringB;

		Double sim=ebc.getSImilarity(comparison.getEntityId1(),comparison.getEntityId2());
		
		for(int level=0;level<10;level++){
			if(sim>= ((double)level*0.1) && sim<= ((double)(level+1)*0.1)){

				if(elements[level]<100)
				{
					//    					ids[comparison.getEntityId1()][comparison.getEntityId1()]=1;
					elements[level]++;
					balance.put(comparison.getEntityId1(),comparison.getEntityId2());

					Set<DataStructures.Attribute> setAtributtes = ebc.exportEntityA(comparison.getEntityId1());
					String sA[]=Converter.createVector(setAtributtes,comparison.getEntityId1());
					concatStringA=sA[0]+"::";
					//  System.out.println(sim + "  ");
					for (int j = 0; j < sA.length; j++) {
						//	   System.out.print(sA[j]+ "  ");
						if(!sA[j].isEmpty())
							sA[j]=sA[j].replace(",", " ").replace(":", " ");
						concatStringA=concatStringA.concat(sA[j]+":");
					}


					setAtributtes = ebc.exportEntityB(comparison.getEntityId2());
					String sB[]=Converter.createVector(setAtributtes,comparison.getEntityId2());
					//    System.out.print( "  ---- ");
					concatStringB=sB[0]+"::";
					for (int j = 0; j < sB.length; j++) {
						//   System.out.print(sB[j]+ "  ");
						if(!sB[j].isEmpty())
							sB[j]=sB[j].replace(",", " ").replace(":", " ");
						concatStringB=concatStringB.concat(sB[j]+":");
					}
					String label="false";
					IdDuplicates duplicatePair1 = new IdDuplicates(comparison.getEntityId1(), comparison.getEntityId2());
					if (duplicates.contains(duplicatePair1)) {
						label="true";
						// System.out.println("duplicate pair " + concatStringA + "   "+ concatStringB);
					}
					//////////////

					final List<Integer> commonBlockIndices = entityIndex.getCommonBlockIndices(i, comparison);
					Instance currentInstance = getFeatures(label.contains("true")?1:0, commonBlockIndices, comparison);

					 
					
					for (int j = 0; j < currentInstance.numAttributes()-1; j++) {
						//BigDecimal teste = new BigDecimal((currentInstance.value(j)));
						psarff.print( (currentInstance.value(j)) + ", ");
					}
					psarff.println(currentInstance.value(currentInstance.numAttributes()-1)==1.0?"1":"0");

					///////////    		             

					FileUtilities.save_data_db( String.valueOf(i), sB[0],concatStringA,concatStringB, sim,label,con,pstxt);
					//  System.out.println();
				}
			//	break; 
			}
		}
	}

	private void prepareStatistics() {
		sampleMatches = new ArrayList<Double>();
		sampleNonMatches = new ArrayList<Double>();
		overheadTimes = new ArrayList[noOfClassifiers];
		resolutionTimes = new ArrayList[noOfClassifiers];
		sampleComparisons = new ArrayList[noOfClassifiers];
		sampleDuplicates = new ArrayList[noOfClassifiers];
		for (int i = 0; i < noOfClassifiers; i++) {
			overheadTimes[i] = new ArrayList<Double>();
			resolutionTimes[i] = new ArrayList<Double>();
			sampleComparisons[i] = new ArrayList<Double>();
			sampleDuplicates[i] = new ArrayList<Double>();
		}
	}

	public void printStatistics() {
		System.out.println("\n\n\n\n\n+++++++++++++++++++++++Printing overall statistics+++++++++++++++++++++++");

		double avSMatches = StatisticsUtilities.getMeanValue(sampleMatches);
		double avSNonMatches = StatisticsUtilities.getMeanValue(sampleNonMatches);
		System.out.println("Sample matches\t:\t" + avSMatches + "+-" + StatisticsUtilities.getStandardDeviation(avSMatches, sampleMatches));
		System.out.println("Sample non-matches\t:\t" + avSNonMatches + "+-" + StatisticsUtilities.getStandardDeviation(avSNonMatches, sampleNonMatches));

		for (int i = 0; i < overheadTimes.length; i++) {
			System.out.println("\n\n\n\n\nClassifier id\t:\t" + (i+1));
			double avOTime = StatisticsUtilities.getMeanValue(overheadTimes[i]);
			double avRTime = StatisticsUtilities.getMeanValue(resolutionTimes[i]);
			double avSEComparisons = StatisticsUtilities.getMeanValue(sampleComparisons[i]);
			double avSDuplicates = StatisticsUtilities.getMeanValue(sampleDuplicates[i]);

			final List<Double> pcs = new ArrayList<Double>();
			for (int j = 0; j < sampleMatches.size(); j++) {
				pcs.add(sampleDuplicates[i].get(j)/(duplicates.size() - sampleMatches.get(j))*100.0);
			}
			double avSPC = StatisticsUtilities.getMeanValue(pcs);

			System.out.println("Overhead time\t:\t" + avOTime + "+-" + StatisticsUtilities.getStandardDeviation(avOTime, overheadTimes[i]));
			System.out.println("Resolution time\t:\t" + avRTime + "+-" + StatisticsUtilities.getStandardDeviation(avRTime, resolutionTimes[i]));
			System.out.println("Sample duplicates\t:\t" + avSDuplicates + "+-" + StatisticsUtilities.getStandardDeviation(avSDuplicates, sampleDuplicates[i]));
			System.out.println("Sample PC\t:\t" + avSPC);
			System.out.println("Sample comparisons\t:\t" + avSEComparisons + "+-" + StatisticsUtilities.getStandardDeviation(avSEComparisons, sampleComparisons[i]));
		}
	}
}